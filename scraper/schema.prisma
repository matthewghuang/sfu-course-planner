datasource db {
	provider = "mysql"
	url = "mysql://root:my_root_password@localhost:3306/sfu_course_data"
}

generator client {
  provider = "prisma-client-js"
}

model Year {
	id Int @id @default(autoincrement())
	text String
	value String @unique
	terms Term[]
}

model Term {
	id Int @id @default(autoincrement())
	text String
	value String

	// each term has many departments
	departments Department[]

	yearId Int
	year Year @relation(fields: [yearId], references: [id], onDelete: Cascade)

	@@unique([value, yearId])
}

model Department {
	id Int @id @default(autoincrement())
	text String
	value String
	name String?

	courseNumbers CourseNumber[]

	termId Int
	term Term @relation(fields: [termId], references: [id], onDelete: Cascade)

	@@unique([value, termId])
}

model CourseNumber {
	id Int @id @default(autoincrement())

	text String
	value String
	title String
	
	sections Section[]

	departmentId Int
	department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)	

	@@unique([value, departmentId])
}

model Section {
	id Int @id @default(autoincrement())

	text String // C100
	value String // c100
	title String // Genetics
	classType String? // e - for enrollment, n - for non-enrollment
	sectionCode String? // LEC, TUT, LAB, SEM
	associatedClass String? // Applies to non-enrollment sections only. Indicates which enrollment section (e.g. classType: "e") it belongs to.

	outlines CourseOutline[]

	courseNumberId Int
	courseNumber CourseNumber @relation(fields: [courseNumberId], references: [id], onDelete: Cascade)

	@@unique([value, courseNumberId])
}

model CourseOutline {
	id Int @id @default(autoincrement())

	name                    String
	title                   String
	description             String?  @db.Text
	dept                    String
	number                  String // e.g., "100W"
	section                 String @db.VarChar(10)// e.g., "D100"
	classNumber             String // e.g., "2921"
	term                    String // e.g., "Summer 2015"
	units                   String? // "3" - kept as String, as in JSON
	type                    String // "e"
	degreeLevel             String // "UGRD"
	deliveryMethod          String?
	designation             String?
	outlinePath             String
	specialTopic            String?
	shortNote               String?
	courseDetails           String?  @db.Text
	educationalGoals        String?  @db.Text
	gradingNotes            String?  @db.Text
	prerequisites           String?  @db.Text
	corequisites            String? @db.Text
	registrarNotes          String?  @db.Text
	departmentalUgradNotes  String? @db.Text
	departmentalGradNotes  String? @db.Text
	requiredReadingNotes    String? @db.Text
	notes                   String? @db.Text
	codeNotes String? @db.Text
	materials String? @db.Text
	requirements String? @db.Text
	graduateStudiesNotes String? @db.Text

	// --- Relationships to other models ---
	
	// Relation to the "instructor" array
	instructors           Json?
	// Relation to the "courseSchedule" array
	courseSchedule Json?
	// Relation to the "grades" array
	grades Json?
	// Relation to the "requiredText" array
	requiredTexts         Json?

	sectionId Int
	sectionParent Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

	@@unique([name, sectionId])
}

// // Model for objects in the "instructor" array
// model Instructor {
// 	name        String // Mark Fettes
// 	commonName  String? // Mark
// 	firstName   String // Mark
// 	lastName    String // Fettes
// 	email       String? // mtfettes@sfu.ca
// 	phone       String? // 778-782-4489
// 	office      String?
// 	officeHours String? @db.Text
// 	profileUrl  String?
// 	roleCode    String  // "PI"
// 	courseName String
// 	section String @db.VarChar(10)
// 	courseNumber String @db.VarChar(10)
// 	department String @db.VarChar(10)
// 	term String @db.VarChar(10)
// 	year Int

// 	// Foreign key to link back to the Course
// 	courseOutlineFK CourseOutline @relation(fields: [courseName, section, courseNumber, department, term, year], references: [name, section, courseNumber, department, termStr, year], onDelete: Cascade)

// 	@@id([name, courseName, section, department, term, year])
// }

// // Model for objects in the "courseSchedule" array
// model CourseSchedule {
// 	uuid String @default(uuid())
// 	sectionCode String  // "SEM"
// 	campus      String?
// 	days        String?  // "Mo, We"
// 	startTime   String?  // "9:30"
// 	endTime     String?  // "13:20"
// 	startDate   String?  // Kept as String, not valid ISO 8601
// 	endDate     String?  // Kept as String, not valid ISO 8601
// 	isExam      Boolean
// 	// for foreign key
// 	courseName String
// 	section String @db.VarChar(10)
// 	courseNumber String @db.VarChar(10)
// 	department String @db.VarChar(10)
// 	term String @db.VarChar(10)
// 	year Int

// 	// Foreign key to link back to the Course
// 	courseOutlineFK CourseOutline @relation(fields: [courseName, section, courseNumber, department, term, year], references: [name, section, courseNumber, department, termStr, year], onDelete: Cascade)

// 	@@id([uuid, courseName, section, courseNumber, department, term, year])
// }

// // Model for objects in the "grades" array
// model GradingComponent {
// 	uuid String @default(uuid())
// 	description String @db.Text
// 	weight      String? // "25" - kept as String, as in JSON

// 	// Foreign key to link back to the Course
// 	courseName String
// 	section String @db.VarChar(10)
// 	courseNumber String @db.VarChar(10)
// 	department String @db.VarChar(10)
// 	term String @db.VarChar(10)
// 	year Int
// 	courseOutlineFK CourseOutline @relation(fields: [courseName, section, courseNumber, department, term, year], references: [name, section, courseNumber, department, termStr, year], onDelete: Cascade)
// 	@@id([uuid, courseName, section, courseNumber, department, term, year])
// }

// // Model for objects in the "requiredText" array
// model RequiredText {
// 	uuid String @default(uuid())
// 	details String @db.Text
// 	isbn String?

// 	// Foreign key to link back to the Course
// 	courseName String
// 	section String @db.VarChar(10)
// 	courseNumber String @db.VarChar(10)
// 	department String @db.VarChar(10)
// 	term String @db.VarChar(10)
// 	year Int
// 	courseOutlineFK CourseOutline @relation(fields: [courseName, section, courseNumber, department, term, year], references: [name, section, courseNumber, department, termStr, year], onDelete: Cascade)
// 	@@id([uuid, courseName, section, courseNumber, department, term, year])
// }